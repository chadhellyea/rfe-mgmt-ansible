# set locale defaults for the Install
lang en_US.UTF-8
keyboard us
timezone UTC

# initialize any invalid partition tables and destroy all of their contents
zerombr

# erase all disk partitions and create a default label
clearpart --all --initlabel

# automatically create xfs partitions with no LVM and no /home partition
autopart --type=plain --fstype=xfs --nohome

# reboot after installation is successfully completed
reboot

# installation will run in text mode
text

# activate network devices and configure with DHCP
network --bootproto=dhcp

# create default user 'core' with sudo privileges using password 'edge'
user --name={{ rfe_user }} --groups=wheel --password={{ rfe_password }}

# set up the OSTree-based install with disabled GPG key verification, the base
# URL to pull the installation content, 'rhel' as the management root in the
# repo, and 'rhel/8/x86_64/edge' as the branch for the installation
ostreesetup --nogpg --url=http://{{ ansible_default_ipv4.address }}:{{ httpd_host_port }}/repo/ --osname=rhel --remote=edge --ref=rhel/8/x86_64/edge

%post

# Set the update policy to automatically download and stage updates to be
# applied at the next reboot
#stage updates as they become available. This is highly recommended
echo AutomaticUpdatePolicy=stage >> /etc/rpm-ostreed.conf


# Create SSH Key for Ansible 

mkdir /root/.ssh
chmod 700 /root/.ssh

ssh-keygen -f /root/.ssh/ansible -t rsa -N ''
cat /root/.ssh/ansible.pub >> /root/.ssh/authorized_keys

# Set up automation script

mkdir /var/rfe

cat > /var/rfe/setup.sh << 'EOF'
#!/bin/bash

set -e

GIT_REPO="{{ rfe_git.url }}"
GIT_VERSION="{{ rfe_git.version }}"
REPO_DIR="/var/rfe/repo"
PLAYBOOK_FILE="{{ rfe_git.playbook_file }}"
RUNNER_IMAGE="{{ ansible_runner.image }}"
RUNNER_IMAGE_PRIVATE_KEY_MOUNT="{{ ansible_runner.private_key_mount }}"

if [ ! -d "${REPO_DIR}" ]; then
  git clone "${GIT_REPO}" "${REPO_DIR}"
fi

cd "${REPO_DIR}"

git remote set-url origin "${GIT_REPO}"

git fetch origin

local_branch=$(git branch --list ${GIT_VERSION})

if [ -z "${local_branch}" ]; then
  git checkout -b ${GIT_VERSION}  origin/${GIT_VERSION}
else
  git checkout ${GIT_VERSION}
fi

git reset --hard origin/${GIT_VERSION}

if [ -f "${REPO_DIR}/${PLAYBOOK_FILE}" ]; then
  podman run -it --rm -v /root/.ssh/ansible:${RUNNER_IMAGE_PRIVATE_KEY_MOUNT}:Z -v ${REPO_DIR}:${REPO_DIR}:Z -w ${REPO_DIR} --net host ${RUNNER_IMAGE} ansible-playbook -i localhost, --private-key=${RUNNER_IMAGE_PRIVATE_KEY_MOUNT} "${REPO_DIR}/${PLAYBOOK_FILE}"
fi

EOF

chmod +x /var/rfe/setup.sh

cat > /etc/systemd/system/rfe-automation.service << 'EOF'
[Unit]
Description=RFE Automation
Requires=network.target
Requires=network-online.target
After=network-online.target
After=nss-lookup.target
 
[Service]
Type=oneshot
ExecStart=/bin/bash -c '/var/rfe/setup.sh'

[Install]
WantedBy=multi-user.target
EOF

cat > /etc/systemd/system/rfe-automation.timer << 'EOF'
[Unit]
Description=Run RFE Automation Every 60 Minutes

[Timer]
OnBootSec={{ rfe_automation_timer_sync }}
OnUnitActiveSec={{ rfe_automation_timer_sync }}

[Install]
WantedBy=timers.target
EOF

systemctl enable rfe-automation.timer rfe-automation.service

%end