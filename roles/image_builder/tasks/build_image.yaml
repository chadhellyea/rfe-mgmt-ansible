---
- name: Create Blueprints Temporary Directory
  file:
    state: directory
    path: "{{ blueprints_tmp_directory }}"

- name: Create Blueprint from Template
  template:
    dest: "{{ blueprints_tmp_directory }}/{{ builder_image.name }}.toml"
    src: blueprint.toml.j2
    mode: 0666

- name: Create Blueprint from Template
  command: >
    composer-cli blueprints push "{{ blueprints_tmp_directory }}/{{ builder_image.name }}.toml"

- name: Resolve Dependencies
  command: >
    composer-cli blueprints depsolve {{ builder_image.name }}

- name: Get Blueprint Status
  command: >
    composer-cli -j compose status
  register: image_builder_status

- name: Image Builder
  block:
    - name: Compose Image
      command: >
        composer-cli -j compose start {{ builder_image.name}} rhel-edge-commit
      register: composed_image

    - name: Set Build Number
      set_fact:
        build_id: "{{ (composed_image.stdout | from_json).build_id }}"

    - name: Wait for Image Build to Complete
      command: >
        composer-cli -j compose status
      delay: 30
      retries: 40
      changed_when: false
      failed_when: not (image_build_status.stdout | from_json | selectattr('id', 'equalto', build_id) | list | first).finished and (image_build_status.stdout | from_json | selectattr('id', 'equalto', build_id) | list | first).status != "FINISHED"
      until: (image_build_status.stdout | from_json | selectattr('id', 'equalto', build_id) | list | first).finished and (image_build_status.stdout | from_json | selectattr('id', 'equalto', build_id) | list | first).status == "FINISHED"
      register: image_build_status

- name: Set Container Image Directory
  set_fact:
    container_image_directory: "{{ container_image_directory_path }}/{{ build_id }}"

- name: Make Directory for Container Image Build
  file:
    state: directory
    path: "{{ container_image_directory }}"

- name: Download Edge Image
  command: >
    composer-cli compose image {{ build_id }}
  args:
    chdir: "{{ container_image_directory }}"
    creates: "{{ container_image_directory }}/{{ build_id }}-commit.tar"

- name: Copy Dockerfile
  copy:
    src: Dockerfile
    dest: "{{ container_image_directory }}/Dockerfile"
    mode: 0666

- name: Create Kickstart File
  template:
    dest: "{{ container_image_directory }}/kickstart.ks"
    src: kickstart.ks.j2
    mode: 0666

- name: Build Image
  command: >
    podman build -t "{{ builder_image.name}}:{{ builder_image.version }}" --build-arg commit={{ build_id }}-commit.tar .
  args:
    chdir: "{{ container_image_directory }}"

- name: Get Running Container by name
  command: >
    podman ps --filter=name={{ builder_image.name}} --format=json
  register: running_containers

- name: Stop Running Container
  command: >
    podman stop "{{ (running_containers.stdout | from_json | first).Id }}"
  when: (running_containers.stdout | from_json | length > 0) and (running_containers.stdout | from_json | first).Image != builder_image.name + ':' +  builder_image.version

- name: Run Container
  command: >
    podman run -d --rm -p "{{ httpd_host_port }}:{{ httpd_container_port }}" "{{ builder_image.name}}:{{ builder_image.version }}"
